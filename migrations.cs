// <auto-generated />
using System;
using HealthSync.InfraStructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthSync.InfraStructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515150001_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthSync.Core.Models.Auth.ClinicManager", b =>
                {
                    b.Property<string>("Manager_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_InformationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Manager_ID");

                    b.HasIndex("User_InformationId");

                    b.ToTable("ClinicManagers");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.Disease", b =>
                {
                    b.Property<int>("Disease_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Disease_ID"));

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Disease_ID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.MedicalHistory", b =>
                {
                    b.Property<int>("MedicalHistory_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalHistory_ID"));

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.Property<string>("Patient_ID1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MedicalHistory_ID");

                    b.HasIndex("Patient_ID1");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.Medicine", b =>
                {
                    b.Property<int>("Medicine_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Medicine_ID"));

                    b.Property<int>("Dosage")
                        .HasColumnType("int");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Medicine_ID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Relations.DiseaseMedicine", b =>
                {
                    b.Property<int>("Disease_ID")
                        .HasColumnType("int");

                    b.Property<int>("Medicine_ID")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseMedicine_ID")
                        .HasColumnType("int");

                    b.HasKey("Disease_ID", "Medicine_ID");

                    b.HasIndex("Medicine_ID");

                    b.ToTable("DiseaseMedicines");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Relations.DiseaseSymptom", b =>
                {
                    b.Property<int>("Disease_ID")
                        .HasColumnType("int");

                    b.Property<int>("Symptom_ID")
                        .HasColumnType("int");

                    b.HasKey("Disease_ID", "Symptom_ID");

                    b.HasIndex("Symptom_ID");

                    b.ToTable("DiseaseSymptoms");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Admin", b =>
                {
                    b.Property<string>("Admin_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_InformationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Admin_ID");

                    b.HasIndex("User_InformationId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Doctor", b =>
                {
                    b.Property<string>("Doctor_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExp")
                        .HasColumnType("int");

                    b.HasKey("Doctor_ID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Patient", b =>
                {
                    b.Property<string>("Patient_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Family_ID")
                        .HasColumnType("int");

                    b.HasKey("Patient_ID");

                    b.HasIndex("Family_ID", "Patient_ID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Clinic", b =>
                {
                    b.Property<int>("Clinic_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Clinic_ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Organization_ID")
                        .HasColumnType("int");

                    b.Property<string>("ServicesOffered")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Clinic_ID");

                    b.HasIndex("Organization_ID");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.EmployeeHealthRecord", b =>
                {
                    b.Property<int>("Record_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Record_ID"));

                    b.Property<string>("HealthStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastCheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Organization_ID")
                        .HasColumnType("int");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.HasKey("Record_ID");

                    b.ToTable("EmployeeHealthRecords");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Family", b =>
                {
                    b.Property<int>("Family_ID")
                        .HasColumnType("int");

                    b.Property<string>("Patient_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Family_ID", "Patient_ID");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecord_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecord_ID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalHistory_ID")
                        .HasColumnType("int");

                    b.Property<int>("MedicalHistory_ID1")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecord_ID");

                    b.HasIndex("MedicalHistory_ID1");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Organization", b =>
                {
                    b.Property<int>("Organization_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Organization_ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Organization_ID");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Symptom", b =>
                {
                    b.Property<int>("Symptom_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Symptom_ID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Symptom_ID");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.VitalSign", b =>
                {
                    b.Property<int>("VitalSign_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalSign_ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Patient_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reads")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalSign_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("VitalSigns");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.Appointment", b =>
                {
                    b.Property<int>("Clinic_ID")
                        .HasColumnType("int");

                    b.Property<string>("Patient_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Doctor_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Appointment_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorClinic_ID")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Clinic_ID", "Patient_ID", "Doctor_ID");

                    b.HasIndex("Patient_ID");

                    b.HasIndex("Doctor_ID", "Clinic_ID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DiseaseMedication", b =>
                {
                    b.Property<int>("Medication_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Medication_ID"));

                    b.Property<int>("Appointment_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Medicine_ID")
                        .HasColumnType("int");

                    b.Property<int>("PatientReport_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Medication_ID");

                    b.HasIndex("Medicine_ID");

                    b.HasIndex("PatientReport_ID");

                    b.ToTable("DiseaseMedications");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorClinic", b =>
                {
                    b.Property<string>("Doctor_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Clinic_ID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorClinic_ID")
                        .HasColumnType("int");

                    b.HasKey("Doctor_ID", "Clinic_ID");

                    b.HasIndex("Clinic_ID");

                    b.ToTable("DoctorClinics");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorNote", b =>
                {
                    b.Property<int>("Note_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Note_ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Doctor_ID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Patient_ID")
                        .HasColumnType("int");

                    b.HasKey("Note_ID");

                    b.ToTable("DoctorNotes");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorPatient", b =>
                {
                    b.Property<int>("DoctorPatient_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorPatient_ID"));

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctor_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Patient_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorPatient_ID");

                    b.HasIndex("Doctor_ID");

                    b.HasIndex("Patient_ID");

                    b.ToTable("DoctorPatients");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.HealthAlert", b =>
                {
                    b.Property<int>("Alert_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Alert_ID"));

                    b.Property<string>("AlertMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ResolvedStatus")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.Property<int>("VitalSign_ID")
                        .HasColumnType("int");

                    b.HasKey("Alert_ID");

                    b.ToTable("HealthAlerts");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.PatientReport", b =>
                {
                    b.Property<int>("PatientReport_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientReport_ID"));

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Disease_ID")
                        .HasColumnType("int");

                    b.Property<int>("DoctorPatient_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalRecord_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientReport_ID");

                    b.HasIndex("Disease_ID");

                    b.HasIndex("DoctorPatient_ID");

                    b.ToTable("PatientReports");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "30BE73FD-027F-4926-8E7F-772477712B4D",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "E704ED93-5318-4720-B4FF-FBAAB3392A59",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "C9184871-37B0-4D1B-A04F-DAB419439B4B",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "9CA13987-DDE0-4926-9305-2607AE6B01C9",
                            Name = "ClinicManager",
                            NormalizedName = "CLINICMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HealthSync.Core.Models.Auth.ClinicManager", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", "User_Information")
                        .WithMany()
                        .HasForeignKey("User_InformationId");

                    b.Navigation("User_Information");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.MedicalHistory", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("Patient_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Relations.DiseaseMedicine", b =>
                {
                    b.HasOne("HealthSync.Core.Models.Basic.Disease", "Disease")
                        .WithMany("DiseaseMedicines")
                        .HasForeignKey("Disease_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.Core.Models.Basic.Medicine", "Medicine")
                        .WithMany("MedicineDiseases")
                        .HasForeignKey("Medicine_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Relations.DiseaseSymptom", b =>
                {
                    b.HasOne("HealthSync.Core.Models.Basic.Disease", "Disease")
                        .WithMany("DiseaseSymptoms")
                        .HasForeignKey("Disease_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Basic.Symptom", "Symptom")
                        .WithMany("SymptomDiseases")
                        .HasForeignKey("Symptom_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Admin", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", "User_Information")
                        .WithMany()
                        .HasForeignKey("User_InformationId");

                    b.Navigation("User_Information");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Doctor", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", "UserInformation")
                        .WithOne()
                        .HasForeignKey("HealthSync.HealthSync.core.Models.Auth.Doctor", "Doctor_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Patient", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", "UserInformation")
                        .WithOne()
                        .HasForeignKey("HealthSync.HealthSync.core.Models.Auth.Patient", "Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Basic.Family", "Family")
                        .WithMany("Patients")
                        .HasForeignKey("Family_ID", "Patient_ID");

                    b.Navigation("Family");

                    b.Navigation("UserInformation");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.User", b =>
                {
                    b.OwnsMany("HealthSync.Core.Models.Auth.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Clinic", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Basic.Organization", "Organization")
                        .WithMany("Clinics")
                        .HasForeignKey("Organization_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.MedicalRecord", b =>
                {
                    b.HasOne("HealthSync.Core.Models.Basic.MedicalHistory", "MedicalHistory")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("MedicalHistory_ID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.VitalSign", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.Patient", "Patient")
                        .WithMany("VitalSigns")
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.Appointment", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Relations.DoctorClinic", "DoctorClinic")
                        .WithMany("Appointments")
                        .HasForeignKey("Doctor_ID", "Clinic_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorClinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DiseaseMedication", b =>
                {
                    b.HasOne("HealthSync.Core.Models.Basic.Medicine", "Medicine")
                        .WithMany("DiseaseMedications")
                        .HasForeignKey("Medicine_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Relations.PatientReport", "PatientReport")
                        .WithMany("DiseaseMedications")
                        .HasForeignKey("PatientReport_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("PatientReport");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorClinic", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Basic.Clinic", "Clinic")
                        .WithMany("ClinicDoctors")
                        .HasForeignKey("Clinic_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.Doctor", "Doctor")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("Doctor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorPatient", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("Doctor_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.Patient", "Patient")
                        .WithMany("PatientDoctors")
                        .HasForeignKey("Patient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.PatientReport", b =>
                {
                    b.HasOne("HealthSync.Core.Models.Basic.Disease", "Disease")
                        .WithMany("PatientReports")
                        .HasForeignKey("Disease_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Relations.DoctorPatient", "DoctorPatient")
                        .WithMany("PatientReports")
                        .HasForeignKey("DoctorPatient_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("DoctorPatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HealthSync.HealthSync.core.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.Disease", b =>
                {
                    b.Navigation("DiseaseMedicines");

                    b.Navigation("DiseaseSymptoms");

                    b.Navigation("PatientReports");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.MedicalHistory", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HealthSync.Core.Models.Basic.Medicine", b =>
                {
                    b.Navigation("DiseaseMedications");

                    b.Navigation("MedicineDiseases");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Doctor", b =>
                {
                    b.Navigation("DoctorClinics");

                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Auth.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PatientDoctors");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Clinic", b =>
                {
                    b.Navigation("ClinicDoctors");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Family", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Organization", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Basic.Symptom", b =>
                {
                    b.Navigation("SymptomDiseases");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorClinic", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.DoctorPatient", b =>
                {
                    b.Navigation("PatientReports");
                });

            modelBuilder.Entity("HealthSync.HealthSync.core.Models.Relations.PatientReport", b =>
                {
                    b.Navigation("DiseaseMedications");
                });
#pragma warning restore 612, 618
        }
    }
}
